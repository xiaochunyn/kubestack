// Generate cmd: protoc --go_out=plugins=grpc:. types.proto
syntax = "proto3";

package types;


service Networks {
    rpc Active(ActiveRequest) returns (ActivateResponse) {}
    rpc CheckTenantID(CheckTenantIDRequest) returns (CheckTenantIDResponse) {}
    rpc GetNetwork(GetNetworkRequest) returns (GetNetworkResponse) {}
    rpc CreateNetwork(CreateNetworkRequest) returns (CommonResponse) {}
    rpc UpdateNetwork(UpdateNetworkRequest) returns (CommonResponse) {}
    rpc DeleteNetwork(DeleteNetworkRequest) returns (CommonResponse) {}
    rpc ListNetworks(ListNetworkRequest) returns (ListNetworkResponse) {}
}

service Subnets {
    rpc ListSubnets(ListSubnetsRequest) returns (ListSubnetsResponse) {}
    rpc CreateSubnet(CreateSubnetRequest) returns (CommonResponse) {}
    rpc GetSubnet(GetSubnetRequest) returns (GetSubnetResponse) {}
    rpc UpdateSubnet(UpdateSubnetRequest) returns (CommonResponse) {}
    rpc DeleteSubnet(DeleteSubnetRequest) returns (CommonResponse) {}
    rpc ConnectSubnets(ConnectSubnetsRequest) returns (CommonResponse) {}
    rpc DisconnectSubnets(DisconnectSubnetsRequest) returns (CommonResponse) {}
    rpc GetRouterNS(GetRouterNSRequest) returns (GetRouterNSResponse) {}
}

service Fwaas {
	rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {}
	rpc GetRule(GetRuleRequest) returns (GetRuleResponse) {}
	rpc CreateRule(CreateRuleRequest) returns (CommonResponse) {}
	rpc UpdateRule(UpdateRuleRequest) returns (CommonResponse) {}
	rpc DeleteRule(DeleteRuleRequest) returns (CommonResponse) {}
}

service LoadBalancers {
	rpc GetLoadBalancer(GetLoadBalancerRequest) returns (GetLoadBalancerResponse) {}
	rpc CreateLoadBalancer(CreateLoadBalancerRequest) returns (CreateLoadBalancerResponse) {}
	rpc UpdateLoadBalancer(UpdateLoadBalancerRequest) returns (UpdateLoadBalancerResponse) {}
	rpc DeleteLoadBalancer(DeleteLoadBalancerRequest) returns (CommonResponse) {}
}

service Pods {
	rpc SetupPod(SetupPodRequest) returns (CommonResponse) {}
	rpc TeardownPod(TeardownPodRequest) returns (CommonResponse) {}
	rpc PodStatus(PodStatusRequest) returns (PodStatusResponse) {}
}

service FloatingIPs{
	rpc CreateFloatingIp(CreateFloatingIpRequest) returns (CreateFloatingIpResponse) {}
    rpc BindFloatingIp(BindFloatingIpRequest) returns (CommonResponse) {}
    rpc DelFloatingIp(DelFloatingIpRequest) returns (CommonResponse) {}
    rpc BindPortToExternal(BindPortToExternalRequest) returns (BindPortToExternalResponse) {}
    rpc UnbindPortFromExternal(UnbindPortFromExternalRequest) returns (CommonResponse) {}
    rpc ListFloatingIps(ListFloatingIpsRequest) returns (ListFloatingIpsResponse) {}
}

message ActiveRequest {
}

message ActivateResponse {
	bool result     = 1;
	string error    = 2;
}

message CommonResponse {
    string error = 1;
}

message CreateFloatingIpRequest {
    string tenantID = 1;
}

message CreateFloatingIpResponse{
    FloatingIp floatingIp = 1;
    string error          = 2;  
}

message BindFloatingIpRequest {
    string portId           = 1;
    string floatingipId     = 2;
}

message DelFloatingIpRequest{
    string floatingipId     = 1;
}

message BindPortToExternalRequest {
    string portName         = 1;
    string tenantID         = 2;
}

message BindPortToExternalResponse {
    string floatingip       = 1;
    string error            = 2;
}

message UnbindPortFromExternalRequest {
    string portName         = 1;
}

message ListFloatingIpsRequest {
    string floatingNetworkID = 1;
}

message ListFloatingIpsResponse {
    repeated FloatingIp floatings = 1;
    string error                  = 2;
}

message FloatingIp{
    string uid              = 1;
    string networkId        = 2;
    string floatingIpAddress= 3;
    string portId           = 4;
    string fixedIp          = 5;
    string tenantId         = 6;
    string status           = 7;
}

// Subnet is a representaion of a subnet
message Subnet {
	string networkID	      = 1;
	string name                = 2;
	string uid        = 3;
	string cidr                = 4;
	string gateway             = 5;
	string tenantid            = 6;
	repeated string dnsservers = 7;
	repeated Route routes      = 8;
}

// Route is a representation of an advanced routing rule.
message Route {
	string name            = 1;
	string nexthop         = 2;
	string destinationCIDR = 3;
}

// Rule is a representaion of a Rule
message Rule {
	string name	=1;
	string id		=2;
	string tenantID	=3;
	string policyID 	=4;
	string protocol	=5;
	string action	=6;
	int32 iPVersion	=7;
	string sourceIPAddress	=8;
	string destinationIPAddress	=9;
	string sourcePort	=10;
	string destinationPort 	=11;
	bool shared	=12;
	bool enabled	=13;	
}

message Network {
    string name             = 1;
    string uid     = 2;
    string tenantID         = 3;
    int32 segmentID  = 4;
    repeated Subnet subnets = 5;
    // Status of network
    // Valid value: Initializing, Active, Pending, Failed, Terminating
    string status            = 6;
}

message GetNetworkRequest {
    string name = 1;
    string id   = 2;
}

message GetNetworkResponse {
    Network network = 1;
    string error    = 2;
}

message CreateNetworkRequest {
    Network network  = 1;
}

message UpdateNetworkRequest {
    Network network = 1;
}

message DeleteNetworkRequest {
    string networkID = 1;
}
message ListNetworkRequest {
	string tenantID = 1;
}

message ListNetworkResponse {
	repeated Network networks = 1;
	string error = 2;
}

message ListSubnetsRequest {
	string networkID = 1;
}

message ListSubnetsResponse {
	repeated Subnet subnets = 1;
	string error = 2;
}

message CreateSubnetRequest {
	Subnet subnet = 1;
}

message GetSubnetRequest {
	string subnetID = 1;
}

message GetSubnetResponse {
    Subnet subnet = 1;
    string error    = 2;
}

message DeleteSubnetRequest {
	string subnetID = 1;
	string networkID = 2;
}

message UpdateSubnetRequest {
	Subnet subnet = 1;
}

message ConnectSubnetsRequest {
	Subnet subnet1 = 1;
	Subnet subnet2 = 2;
}

message DisconnectSubnetsRequest {
	Subnet subnet1 = 1;
	Subnet subnet2 = 2;
}

message GetRouterNSRequest {
	string subnetID = 1;
}

message GetRouterNSResponse {
	string routerNS = 1;
	string error = 2;
}

message ListRulesRequest {
	string tenantID = 1;
}

message ListRulesResponse {
	repeated Rule rules = 1;
	string error = 2;
}

message GetRuleRequest {
   	 string ruleID   = 1;
}

message GetRuleResponse {
    	Rule rule = 1;
   	string error    = 2;
}

message CreateRuleRequest {
	Rule rule = 1;
}

message DeleteRuleRequest {
	string ruleID = 1;
}

message UpdateRuleRequest {
	Rule rule = 1;
}

message GetLoadBalancerRequest {
    string name = 1;
}

message GetLoadBalancerResponse {
    LoadBalancer loadBalancer   = 1;
    string error                = 2;
}

message HostPort {
    string name         = 1;
    string ipaddress    = 2;
    int32 servicePort     = 3;
    int32 targetPort      = 4;
}

// LoadBalancer is a replace of kube-proxy, so load-balancing can be handled
// by network providers so as to overcome iptables overhead
message LoadBalancer {
	string name                 = 1;
	string uid         = 2;
	string vip         = 3;
	// Valid values: "TCP", "UDP", "HTTP", "HTTPS"
	string loadBalanceType      = 4;
    string status      = 5;
    string tenantID             = 6;
    repeated string externalIPs = 7;
    repeated Subnet subnets     = 8;
    repeated HostPort hosts     = 9;
}

message CreateLoadBalancerRequest {
    LoadBalancer loadBalancer   = 1;
    // Valid value: ClientIP, None
    string affinity             = 2;
}

message CreateLoadBalancerResponse {
	string vip      = 1;
	string error    = 2;
}

message UpdateLoadBalancerRequest {
    string name                 = 1;
    repeated string externalIPs = 2;
    repeated HostPort hosts     = 3;
}

message UpdateLoadBalancerResponse {
	string vip      = 1;
    string error    = 2;
}

message DeleteLoadBalancerRequest {
	string name = 1;
}

message CheckTenantIDRequest {
	string tenantID = 1;
}

message CheckTenantIDResponse {
	bool result     = 1;
	string error    = 2;
}

message SetupPodRequest {
    string podName =             1;
    string namespace            = 2;
    string containerRuntime     = 3;
    string podInfraContainerID  = 4;
    Network network             = 5;
    string subnetID	=6;
}

message TeardownPodRequest {
    string podName =             1;
    string namespace            = 2;
    string containerRuntime     = 3;
    string podInfraContainerID  = 4;
    Network network             = 5;
}

message PodStatusRequest {
    string podName =             1;
    string namespace            = 2;
    string containerRuntime     = 3;
    string podInfraContainerID  = 4;
    Network network             = 5;
}

message PodStatusResponse {
    string ip       = 1;
    string error    = 2;
}